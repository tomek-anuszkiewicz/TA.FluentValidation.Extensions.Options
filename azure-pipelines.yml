trigger:
- master
- feature/*
pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  coverageResultFolder: '$(Build.SourcesDirectory)/TestResults/Coverage/'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

steps:

- task: DotNetCoreCLI@2
  displayName: install gitversion
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install gitversion.tool --tool-path .'
    includeNuGetOrg: true


- script: ./dotnet-gitversion > gitversion.json
  displayName: get gitversion

- task: oneLuckiDevJson2Variable@1
  displayName: parse gitversion
  inputs:
    jsonFile: 'gitversion.json'
    shouldPrefixVariables: true
    variablePrefix: 'gitversion'

- task: DotNetCoreCLI@2
  displayName: dotnet clean
  inputs:
    command: 'custom'
    custom: 'clean'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet build for test
  inputs:
    command: build
    arguments: >-
      --configuration $(buildConfiguration)
      -p:Version=$(gitversion.SemVer)
      -p:AssemblyVersion=$(gitversion.AssemblySemVer)
      -p:FileVersion=$(gitversion.AssemblySemFileVer)
      -p:IsBuildServer=false

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: 'test'
    arguments: >-
      --configuration $(buildConfiguration)
      --no-build
      -p:CollectCoverage=true
      -p:CoverletOutputFormat=cobertura
      -p:CoverletOutput=$(coverageResultFolder)

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(coverageResultFolder)/coverage.cobertura.xml'
    reportDirectory: '$(coverageResultFolder)/Report/'

- task: DotNetCoreCLI@2
  displayName: dotnet clean
  inputs:
    command: 'custom'
    custom: 'clean'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet build for push
  inputs:
    command: build
    arguments: >-
      --configuration $(buildConfiguration)
      -p:Version=$(gitversion.SemVer)
      -p:AssemblyVersion=$(gitversion.AssemblySemVer)
      -p:FileVersion=$(gitversion.AssemblySemFileVer)
      -p:IsBuildServer=true

- task: CopyFiles@2
  displayName: copy nuget for push
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/src/TA.FluentValidation.Extensions.Options/bin/Release'
    Contents: |
      TA.FluentValidation.Extensions.Options.$(gitversion.SemVer).nupkg
      TA.FluentValidation.Extensions.Options.$(gitversion.SemVer).snupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- script: >
    dotnet nuget push
    $(Build.ArtifactStagingDirectory)/TA.FluentValidation.Extensions.Options.$(gitversion.SemVer).nupkg
    -k $NUGET_API_KEY
    -s https://api.nuget.org/v3/index.json
  displayName: dotnet nuget push
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  env:
    NUGET_API_KEY: $(NUGETAPIKEYTAFLUENTVALIDATIONEXTENSIONSOPTIONS)

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: Nuget package
  
- task: GitHubRelease@1
  displayName: create github release
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:  
    gitHubConnection: 'github.com_tomek-anuszkiewicz'
    title: '$(gitversion.SemVer)'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: '$(gitversion.SemVer)'
    releaseNotesSource: 'inline'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |-
      $(Build.ArtifactStagingDirectory)/TA.FluentValidation.Extensions.Options.$(gitversion.SemVer).nupkg
      $(Build.ArtifactStagingDirectory)/TA.FluentValidation.Extensions.Options.$(gitversion.SemVer).snupkg

- task: GitHubRelease@1
  displayName: delete github release
  condition: and(failed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    gitHubConnection: 'github.com_tomek-anuszkiewicz'
    repositoryName: '$(Build.Repository.Name)'
    action: 'delete'
    tag: '$(gitversion.SemVer)'

- script: > 
    dotnet nuget delete
    TA.FluentValidation.Extensions.Options $(gitversion.SemVer)
    --non-interactive
    -k $NUGET_API_KEY
    -s https://api.nuget.org/v3/index.json
  displayName: dotnet nuget delete
  condition: and(failed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  env:
    NUGET_API_KEY: $(NUGETAPIKEYTAFLUENTVALIDATIONEXTENSIONSOPTIONS)

- script: >
    git push https://tomek-anuszkiewicz:$GITHUB_PAK@github.com/tomek-anuszkiewicz/TA.FluentValidation.Extensions.Options --delete $(gitversion.SemVer)
  displayName: git delete tag
  condition: and(failed(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  env:
    GITHUB_PAK: $(GITHUBPAKTAFLUENTVALIDATIONEXTENSIONSOPTIONS)
